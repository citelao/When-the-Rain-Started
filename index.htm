<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>When the Rain Started</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div id="filters"></div>
	<script id="shader" type="shader">
		precision mediump float;

		varying vec2 vTextureCoord; //The coordinates of the current pixel
  		uniform sampler2D uSampler; //The image data
  		uniform vec4 filterArea; // actual filter area

		uniform vec2 dimensions;
  		uniform float time;

		// adapted from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
		#define M_PI 3.14159265358979323846

		float rand(vec2 co){return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}
		float rand (vec2 co, float l) {return rand(vec2(rand(co), l));}
		float rand (vec2 co, float l, float t) {return rand(vec2(rand(co, l), t));}

		float perlin(vec2 p, float dim, float time) {
			vec2 pos = floor(p * dim);
			vec2 posx = pos + vec2(1.0, 0.0);
			vec2 posy = pos + vec2(0.0, 1.0);
			vec2 posxy = pos + vec2(1.0);
			
			float c = rand(pos, dim, time);
			float cx = rand(posx, dim, time);
			float cy = rand(posy, dim, time);
			float cxy = rand(posxy, dim, time);
			
			vec2 d = fract(p * dim);
			d = -0.5 * cos(d * M_PI) + 0.5;
			
			float ccx = mix(c, cx, d.x);
			float cycxy = mix(cy, cxy, d.x);
			float center = mix(ccx, cycxy, d.y);
			
			return center * 2.0 - 1.0;
		}

		float rand(float n){return fract(sin(n) * 43758.5453123);}
		float noise(float p){
			float fl = floor(p);
			float fc = fract(p);
			return mix(rand(fl), rand(fl + 1.0), fc);
		}

		float noise(vec2 n) {
			const vec2 d = vec2(0.0, 1.0);
			vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
			return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
		}

		vec2 mapCoord( vec2 coord )
		{
		    coord *= filterArea.xy;
		    coord += filterArea.zw;

		    return coord;
		}

		vec2 unmapCoord( vec2 coord )
		{
		    coord -= filterArea.zw;
		    coord /= filterArea.xy;

		    return coord;
		}

		void main(void) // out vec4 fragColor, in vec2 fragCoord 
		{
			vec2 uv = mapCoord(vTextureCoord) / dimensions;
			float frame = sin(floor(time / 3.0) * 3.0);
		    float noise = noise((uv + vec2(frame)) * 40.0);
		    uv += (noise * 1.0 - 0.5) * 0.002;
		    gl_FragColor = texture2D(uSampler, unmapCoord(uv * dimensions));
		}
	</script>

	<script src="https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js"></script>
	
	<script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.4.3/pixi.min.js"></script>

	<script src="bower_components/svg.js/dist/svg.min.js"></script>
	<script src="bower_components/svg.filter.js/dist/svg.filter.min.js"></script>

	<script src="js/Emitter.js"></script>
	<script src="js/anim/easing.js"></script>

	<script src="js/obj/Building.js"></script>
	<script src="js/obj/Car.js"></script>
	<script src="js/obj/Raindrop.js"></script>

	<script src="js/scenes/1.js"></script>
	<script src="js/scenes/2.js"></script>
	<script src="js/scenes/3.js"></script>
	<script src="js/scenes/4.js"></script>
	<script src="js/scenes/5.js"></script>
	<script src="js/story.js"></script>
</body>
</html>